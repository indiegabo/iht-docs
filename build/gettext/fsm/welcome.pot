# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, IndieGabo
# This file is distributed under the same license as the IndieGabo's Handy Tools package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IndieGabo's Handy Tools \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-04 15:59-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/fsm/welcome.rst:4
msgid "FSM"
msgstr ""

#: ../../source/fsm/welcome.rst:6
msgid "Much welcome to the IndieGabo's FSM!"
msgstr ""

#: ../../source/fsm/welcome.rst:8
msgid "This is a code driven FSM (Finate State Machine) solution for your Unity project."
msgstr ""

#: ../../source/fsm/welcome.rst:11
msgid "What is a Finite State Machine?"
msgstr ""

#: ../../source/fsm/welcome.rst:13
msgid "A Finate State Machine is a design pattern focused on dealing with entities that have multiple possible states."
msgstr ""

#: ../../source/fsm/welcome.rst:16
msgid "Why this FSM?"
msgstr ""

#: ../../source/fsm/welcome.rst:18
msgid "Although we know Unity's Animator is a StateMachine it can get messy to use it as a functionality handler. This FSM helps you to organizing your code by holding the actors actions logic inside its respective state (we will talk about actors in a bit)."
msgstr ""

#: ../../source/fsm/welcome.rst:21
msgid "Key pratical benefits of using this FSM:"
msgstr ""

#: ../../source/fsm/welcome.rst:23
msgid "Helps you keep things organized"
msgstr ""

#: ../../source/fsm/welcome.rst:24
msgid "Once you understand how it works it'll save you hours of debugging since you will know exactly where each functionality is being executed"
msgstr ""

#: ../../source/fsm/welcome.rst:25
msgid "Avoids overload of unecessary if statements since each state will only check for the conditions based on their registered transitions"
msgstr ""

#: ../../source/fsm/welcome.rst:26
msgid "You can get it running in like 5 minutes"
msgstr ""

#: ../../source/fsm/welcome.rst:29
msgid "How it Works"
msgstr ""

#: ../../source/fsm/welcome.rst:31
msgid "Take the concept of an ``actor`` being anything on your game wich performs several actions. The ``state machine`` then is setup to rule a given ``actor`` states of actions. The ``actor`` states must be registered into the ``state machine`` being that a ``state`` knows when to transition into another ``state`` under specific conditions."
msgstr ""

#: ../../source/fsm/welcome.rst:35
msgid "Also, for the usage of this FSM, we consider that a ``state`` isn't just some kind of status or definition. Our states **actually handles** what its ``actor`` performs while on a given ``state`` of actions."
msgstr ""

#: ../../source/fsm/welcome.rst:39
msgid "How to use"
msgstr ""

#: ../../source/fsm/welcome.rst:50
msgid "API"
msgstr ""

#: ../../source/fsm/welcome.rst:-1
msgid "Gabinho Waving"
msgstr ""
