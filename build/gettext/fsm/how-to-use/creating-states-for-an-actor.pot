# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, IndieGabo
# This file is distributed under the same license as the IndieGabo's Handy Tools package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IndieGabo's Handy Tools \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-04 15:59-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:4
msgid "Creating States for an Actor"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:7
msgid "What is a state?"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:9
msgid "A state represents a specific group of actions that should be performed while an actor's specific condition is met."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:12
msgid "The usage strategy"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:14
msgid "After being correctly crafted, a :ref:`State <state-class>` script should be attached to the same GameObject as the :ref:`StateMachine <state-machine-class>`. The machine will then automatically recognize it and use it as it should."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:17
msgid "Also, the :ref:`State <state-class>` class, as the :ref:`Actor <actor-class>` class, is abstract. It is so because a state is specific for an specific actor. Being that way, it does not make any sense to a state to exist without knowing its reason for being."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:29
msgid "The code"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:31
msgid "Below is the base code for a successful state. Take a look at it and feel free to copy and use it as you wish."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:79
msgid "And, of course, there is a Script Template ready for you at *Create* ``->`` *IndieGabo* ``->`` *FSM* ``->`` *New State*."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:89
msgid "Ok. Now that we've seen the code, let's take a deep dive into each of those methods. All these methods are optional and you only need to implement the ones you will use inside your state."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:93
msgid "OnLoad()"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:95
msgid "This method represents the moment a :ref:`StateMachine <state-machine-class>` loads this :ref:`State <state-class>` script into its handled states. So it is inside the ``State.OnLoad()`` that you should put any logic regardind initialization **before** the machine starts running."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:112
msgid "The ``State.OnLoad()`` is the best place to register transitions. Wich we will cover on the :ref:`Transitioning Between States <transitioning-between-states>` section."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:115
msgid "This method is called only once in the :ref:`StateMachine <state-machine-class>` life cycle."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:118
msgid "OnEnter()"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:120
msgid "This method is called the **exact moment** a :ref:`StateMachine <state-machine-class>` sets this :ref:`State <state-class>` script as its current state."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:133
msgid "The ``State.OnEnter()`` is perfect for start playing animations, initializing variables, properties and etc."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:136
msgid "OnExit()"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:138
msgid "This method is called **right before** a :ref:`StateMachine <state-machine-class>` wich has this :ref:`State <state-class>` script as its current state, transition into another state."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:152
msgid "The ``State.OnExit()`` is perfect place to stop animations and reset variables, properties and etc."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:155
msgid "Tickers"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:157
msgid "Once a State is defined as current state by the machine, its \"Ticker methods\" will be called at each time its actor \"frame handlers\" are executed."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:160
msgid "They are:"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:162
msgid "``Tick()``: Called every time the actor `Update() <https://docs.unity3d.com/ScriptReference/MonoBehaviour.Update.html>`_ method is called."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:163
msgid "``LateTick()``: Called every time the actor `LateUpdate() <https://docs.unity3d.com/ScriptReference/MonoBehaviour.LateUpdate.html>`_ method is called."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:164
msgid "``FixedTick()``: Called every time the actor `FixedUpdate() <https://docs.unity3d.com/ScriptReference/MonoBehaviour.FixedUpdate.html>`_ method is called."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:197
msgid "If you are not familiar with the `LateUpdate() <https://docs.unity3d.com/ScriptReference/MonoBehaviour.LateUpdate.html>`_ method, it is called once per frame after the `Update() <https://docs.unity3d.com/ScriptReference/MonoBehaviour.Update.html>`_ as a way to organize your script execution."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:200
msgid "Refer to the :ref:`IndieGabo's FSM Life Cycle <lifecycle>` for visual information about Tickers being called."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:205
msgid "Transitioning Between States"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:207
msgid "There are two ways for a state to transition into another state:"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:209
msgid "By calling the Machine's ``ChangeState()`` method."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:213
msgid "As seen on the :ref:`State Documentation <state-class>`, all the states hold reference to the Machine they belong to. Therefore, accessing the machine's methods from within a state is as easy as using its ``State.machine`` property as we can see below."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:233
msgid "By registering a :ref:`StateTransition <state-transition-class>` inside its ``State.OnLoad()`` using the ``State.AddTransition()`` method."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:235
msgid "Using this approach (wich is highly recommended) the machine will, at each of the \"frame handlers\", evaluate if any condition is met considering given priorities. If so, it will automatically transition into the target state."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:238
msgid "A :ref:`StateTransition <state-transition-class>` consists in a ``Condition``, a target ``State`` and a ``priotity`` level. But there is no need for you to instantiate it. Just call the ``State.AddTransition()`` method and pass the those 3 arguments. I take care of the rest for you. Here is how you use it:"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:250
msgid "But, if you somehow prefer, here is how a StateTransition is instantiated and registered:"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:261
msgid "Note that to declare a ``Condition`` you **MUST** approach using a `Func<TResult> Delegate <https://docs.microsoft.com/en-us/dotnet/api/system.func-1?view=net-6.0>`_. Do not worry if you are not familiar with this yet. All you need to know is that the machine will call this as a method (function) and its context will be evaluated as true or false only when the machine do so. In case this represents news for you, for now, just follow the syntax in the code below each time you want to register a :ref:`StateTransition <state-transition-class>` in a state."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:267
msgid "To declare the target state, since all states are components attached to the same GameObject, you can just use the ``GetComponent<State>()`` method."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:269
msgid "At last, priority for the machine is read **descending**. Wich means the higher the integer you give as third argument, sooner its condition will be evaluated. otherwise it will be read as the declaration order. The default priority value is ``0``."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:293
msgid "The ``State.OnLoad()`` is called only once on the Machine's life cycle. Meaning that any ``GetComponent<State>()`` (or, well... anything else) used inside of it will not be called multiple times."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:297
msgid "The inspector"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:299
msgid "For a simple state, a simple name. Just that. You can set a Name for your state using Unity's inspector so you get some better visual feedback when taking a look at the state machine."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:302
msgid "Set a name:"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:-1
msgid "State Name on inspector"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:307
msgid "And see it in action while inpecting the StateMachine:"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:-1
msgid "State Name appearing on machine"
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:312
msgid "That is it about creating a state for now. Let me show you a little about :ref:`how to use <using-the-state-machine-class>` our precious state machine."
msgstr ""

#: ../../source/fsm/how-to-use/creating-states-for-an-actor.rst:-1
msgid "Gabinho Waving"
msgstr ""
